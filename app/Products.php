<?php

namespace App;
use Illuminate\Database\Eloquent\Model;

class Products extends Model
{
    const UNAVAILABEL_PRODUCT = 'unavailable';
    const AVAILABEL_PRODUCT = 'available';


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function ($product){
            //if ($product->children()){


                /*foreach ($children as $child){
                    // $this->deleteCategoryProducts($child);
                    foreach ($child->products as $product){
                        $product->delete();
                    }
                    $child->delete();
                }*/


/*
            $product->sales()->delete();

            $product->offers()->detach();
            $product->favorite()->detach();
            $product->orders()->detach();
            $product->attributes()->detach();

            $product->attachments()->delete();

            $product->delete();*/
           // }
        });
    }


    public function attachments(){
        return $this->hasMany(Attachment::class);
    }

    public function branch(){
        return $this->belongsTo(Branches::class);
    }


    public function offers(){
        return $this->belongsToMany(Offers::class);
    }

    public function group(){
        return $this->belongsTo(Groups::class);
    }

    public function category(){
        return $this->belongsTo(Categories::class);
    }


    public function orders(){
        return $this->belongsToMany(Orders::class);
    }

    public function parent(){
        return $this->belongsTo(Products::class);
    }

    public function children(){
        return $this->hasMany(Products::class,'parent_id');
    }

    public function rates(){
        return $this->belongsToMany(User::class,'rates')
            ->as('rates')
            ->withTimestamps()

            ->withPivot([
                'rate',
            ]);
    }


    public function sales(){
        return $this->hasMany(Sales::class,'products_id');
    }

    public function favorite(){
        return $this->belongsToMany(User::class,'favorite');
    }

    public function attributes(){
        return $this->belongsToMany(Attributes::class,'attribute_values')
            ->as('attribute_values')
            ->withPivot([
                'value',
                'name',
            ]);
    }
}
